"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

const _require = require(`@contentful/rich-text-html-renderer`),
      documentToHtmlString = _require.documentToHtmlString;

const _require2 = require(`gatsby/graphql`),
      GraphQLString = _require2.GraphQLString;

let pathPrefixCacheStr = ``;

const htmlCacheKey = node => `transformer-contentful-rich-text-html-${node.internal.contentDigest}-${pathPrefixCacheStr}`;

module.exports = ({
  type,
  cache,
  pathPrefix
}, pluginOptions) => {
  if (type.name !== `ContentfulRichText`) {
    return {};
  }

  pathPrefixCacheStr = pathPrefix || ``;
  let renderOptions = pluginOptions.renderOptions;
  renderOptions = renderOptions || {};
  return new Promise((resolve, reject) => {
    function getHTML(_x) {
      return _getHTML.apply(this, arguments);
    }

    function _getHTML() {
      _getHTML = (0, _asyncToGenerator2.default)(function* (richTextNode) {
        const cachedHTML = yield cache.get(htmlCacheKey(richTextNode));

        if (cachedHTML) {
          return cachedHTML;
        } else {
          const html = documentToHtmlString(JSON.parse(richTextNode.internal.content), renderOptions); // Save new HTML to cache and return

          cache.set(htmlCacheKey(richTextNode), html);
          return html;
        }
      });
      return _getHTML.apply(this, arguments);
    }

    return resolve({
      html: {
        type: GraphQLString,

        resolve(richTextNode) {
          return getHTML(richTextNode);
        }

      }
    });
  });
};